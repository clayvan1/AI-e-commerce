# docker-compose.yml

# No 'version:' attribute as it's obsolete in newer Docker Compose versions

services:
  server:
    build: ./server  # Path to your Flask backend Dockerfile
    container_name: flask-server
    ports:
      - "5555:5555" # Flask app usually runs on port 5555 or 5000
    environment:
      # Environment variables for your Flask backend
      # Note: 'db' here refers to the service name defined in this docker-compose file
      DATABASE_URL: postgresql://postgres:postgres@db:5432/mydatabase
    depends_on:
      - db # Ensure the database starts before the server
    volumes:
      - ./server:/app # Mount local server code for hot-reloading during development
      # If your Python virtual environment is named 'venv' inside /app, you might need to exclude it:
      # - /app/venv # Prevents host's venv from interfering/overwriting container's
    restart: on-failure # Automatically restart if it crashes

  frontend:
    build:
      context: ./frontend  # Path to your React frontend Dockerfile
      dockerfile: Dockerfile.dev # Name of the Dockerfile in the ./frontend directory
    container_name: react-frontend
    ports:
      - "3000:3000" # Map host port 3000 to container port 3000 (React dev server default)
    depends_on:
      - server # Ensure the backend is running before the frontend starts (useful for API calls)
    volumes:
      # Mount your local frontend source code into the container.
      # This enables hot-reloading during development: changes on your host are reflected in the container.
      - ./frontend:/app

      # Crucially: Mount an anonymous volume over node_modules inside the container.
      # This prevents your host's (potentially empty or incompatible) node_modules
      # from overwriting the node_modules installed *inside* the container during the build.
      # The installed node_modules will persist within this anonymous volume.
      - /app/node_modules
    restart: on-failure # Automatically restart if it crashes

  db:
    image: postgres:16 # Using a specific PostgreSQL version
    container_name: postgres-db
    restart: always # Always restart the database container
    environment:
      # Database credentials and name
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    volumes:
      # Persist database data to a named volume.
      # This ensures your data is not lost when the container is stopped or removed.
      - pgdata:/var/lib/postgresql/data
    ports:
      # Optional: Expose PostgreSQL port to your host for direct access (e.g., using pgAdmin)
      - "5432:5432"

# Define named volumes that are used by services
volumes:
  pgdata: {} # Defines the named volume 'pgdata' for PostgreSQL data persistence
  # You don't need to define an explicit volume for '/app/node_modules' as it's an anonymous volume.